{"version":3,"sources":["components/Movie/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","vote","poster_path","title","release_date","vote_average","overview","oldDate","newDate","slice","className","src","alt","App","API_FEATURED","useState","movies","setMovies","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","results","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAqCeA,G,MAlCD,SAAC,GAAkE,IAO1DC,EAPNC,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC1DC,EAAUH,EAIVI,EAHMD,EAAQE,MAAM,EAAG,IAGP,IAFRF,EAAQE,MAAM,EAAG,GAEK,IADvBF,EAAQE,MAAM,EAAE,GAa7B,OACC,sBAAKC,UAAU,QAAf,UACC,qBAAKC,IApBQ,mCAoBOT,EAAaU,IAAKT,IACtC,sBAAKO,UAAU,aAAf,UACC,6BAAKP,IAEL,0CAAY,sBAAMO,UAAS,eAhBRT,EAgB8BI,EAfhDJ,GAAQ,EACH,QACEA,GAAQ,EACV,SAEA,QAUM,SAAuDI,OACnE,gDAAmBG,QAEpB,sBAAKE,UAAU,iBAAf,UACC,2CACA,4BAAIJ,YCgCOO,MA3Df,WAEE,IAAMC,EAAe,+GAFR,EAOeC,mBAAS,IAPxB,mBAONC,EAPM,KAOEC,EAPF,OAQuBF,mBAAS,IARhC,mBAQNG,EARM,KAQMC,EARN,KAUbC,qBAAU,WACRC,EAAUP,KACT,IAEH,IAAMO,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLV,EAAUU,EAAKC,aAqBrB,OACE,qCACE,mCACE,sBAAMlB,UAAU,eAAhB,mCACA,sBAAMmB,SAjBY,SAACC,GACvBA,EAAEC,iBAEgB,KAAfb,GACDG,EA3BqB,4FA2BQH,GAE7BC,EAAc,KAEdE,EAAUP,IASR,SACE,uBAAOJ,UAAU,SAASsB,KAAK,OAAOC,YAAY,YAAYC,MAAOhB,EAAYiB,SAtBjE,SAACL,GACvBX,EAAcW,EAAEM,OAAOF,eAwBrB,qBAAKxB,UAAU,kBAAf,SACGM,EAAOqB,OAAS,GAAKrB,EAAOsB,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,eAEMA,GADCA,EAAMC,aC1CRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f706744a.chunk.js","sourcesContent":["import React from 'react';\n\nconst API_IMG = \"https://image.tmdb.org/t/p/w1280\";\nconst Movie = ({ poster_path, title, release_date, vote_average, overview }) => {\n\tconst oldDate = release_date;\n\tconst day = oldDate.slice(8, 10);\n\tconst month = oldDate.slice(5, 7);\n\tconst year = oldDate.slice(0,4);\n\tconst newDate = day + \"-\" + month + \"-\" + year;\n\n\tconst setVoteClass = (vote) => {\n\t\tif(vote >= 8) {\n\t\t\treturn \"green\";\n\t\t} else if(vote >= 6) {\n\t\t\treturn \"orange\";\n\t\t} else {\n\t\t\treturn \"red\";\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"movie\">\n\t\t\t<img src={API_IMG + poster_path} alt={title}></img>\n\t\t\t<div className=\"movie-info\">\n\t\t\t\t<h3>{title}</h3>\n\t\t\t\t{/* <span className={`tag ${setVoteClass(vote_average)}`}>{vote_average}</span> */}\n\t\t\t\t<h3>Rating: <span className={`tag ${setVoteClass(vote_average)}`}>{vote_average}</span></h3>\n\t\t\t\t<h3>Release Date: {newDate}</h3>\n\t\t\t</div>\n\t\t\t<div className=\"movie-overview\">\n\t\t\t\t<h3>Overview:</h3>\n\t\t\t\t<p>{overview}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Movie;","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport Movie from './components/Movie/Movie';\n\nfunction App() {\n\n  const API_FEATURED = \"https://api.themoviedb.org/3/discover/movie?api_key=e25f5e477aa44b7f2eec1a83c763a0cc&sort_by=popularity.desc\";\n  const API_SEARCH_MOVIE = \"https://api.themoviedb.org/3/search/movie?api_key=e25f5e477aa44b7f2eec1a83c763a0cc&query=\";\n\n  // const API_FEATURED = \"https://api.themoviedb.org/3/search/movie?api_key=e25f5e477aa44b7f2eec1a83c763a0cc&query=avengers\"\n\n  const [movies, setMovies] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    getMovies(API_FEATURED);\n  }, [])\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((res) => res.json())\n      .then((data) => {\n        setMovies(data.results);\n      })\n  }\n\n  const onChangeHandler = (e) => {\n    setSearchTerm(e.target.value);\n  }\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if(searchTerm !== \"\") {\n      getMovies(API_SEARCH_MOVIE + searchTerm);\n\n      setSearchTerm(\"\");\n    } else {\n      getMovies(API_FEATURED);\n    }\n    \n  }\n\n  return (\n    <>\n      <header>\n        <span className=\"titleWebsite\">Movies App with React</span>\n        <form onSubmit={onSubmitHandler}>\n          <input className=\"search\" type=\"text\" placeholder=\"Search...\" value={searchTerm} onChange={onChangeHandler} />\n        </form>\n      </header>\n      <div className=\"movie-container\">\n        {movies.length > 0 && movies.map((movie) => (\n          <Movie \n            key={movie.id}\n            {...movie}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}